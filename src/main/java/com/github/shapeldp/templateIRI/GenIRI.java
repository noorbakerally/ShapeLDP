/* Generated By:JavaCC: Do not edit this line. GenIRI.java */
package com.github.shapeldp.templateIRI;
import java.net.URI;
import org.apache.jena.graph.Node;
import org.apache.jena.graph.NodeFactory;
import org.apache.jena.query.Query;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.shared.PrefixMapping;
import org.apache.jena.sparql.core.TriplePath;
import org.apache.jena.sparql.path.Path;
import org.apache.jena.sparql.path.PathParser;
import org.apache.jena.sparql.syntax.ElementPathBlock;

import java.util.List;
import org.apache.jena.query.ResultSet;
import com.github.shapeldp.evaluation.Global;
import org.apache.jena.query.QueryFactory;

public class GenIRI implements GenIRIConstants {

  static final public String expr(Object obj) throws ParseException {
        String leftValue ;
    int rightValue ;
        String ppath;
        Model graph;

        String concatLeftValue;
        String concatRightValue;

        String replace1;
        String replace2;
        String replace3;

        String split1;
    String split2;
    int split3;

    String querysq;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PATH:
      jj_consume_token(PATH);
      jj_consume_token(RPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RES:
        leftValue = getResIRI(obj);
        break;
      case STRING_LITERAL1:
        leftValue = str();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      rightValue = num();
      jj_consume_token(LPAR);
            URI uri = URI.create(leftValue);
        String[] pathParts = uri.getRawPath().split("/");
        String result = pathParts[rightValue+1];
            {if (true) return result;}
      break;
    case PPATH:
      jj_consume_token(PPATH);
      jj_consume_token(RPAR);
      graph = resGraph(obj);
      jj_consume_token(COMMA);
      ppath = str();
      jj_consume_token(LPAR);
            List <Object> objs = (List) obj;
            String resIRI = (String)objs.get(1);
        PrefixMapping prefixMap = (PrefixMapping)objs.get(2);
        Path p = PathParser.parse(ppath, prefixMap);
        Query query = new Query();
        query.setQuerySelectType();
        Node oResource = NodeFactory.createURI(resIRI);
        Node res = NodeFactory.createVariable("result");
        TriplePath triplePattern = new TriplePath(oResource,p,res);
        ElementPathBlock tp = new ElementPathBlock();
        tp.addTriplePath(triplePattern);
        query.setQueryPattern(tp);
        query.setQueryResultStar(true);

        ResultSet rs = Global.exeQuery(query.serialize(), graph);
        while (rs.hasNext()){
            String varResult = rs.next().get("?result").toString();
            {if (true) return varResult;}
        }

        //Random rand = new Random();
        //return String.valueOf(rand.nextLong());

        {if (true) return null;}
      break;
    case CONCAT:
      jj_consume_token(CONCAT);
      jj_consume_token(RPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL1:
        concatLeftValue = str();
        break;
      case PPATH:
      case CONCAT:
      case REPLACE:
      case QUERY:
      case SPLIT:
      case PATH:
        concatLeftValue = expr(obj);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL1:
        concatRightValue = str();
        break;
      case PPATH:
      case CONCAT:
      case REPLACE:
      case QUERY:
      case SPLIT:
      case PATH:
        concatRightValue = expr(obj);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAR);
        {if (true) return concatLeftValue+concatRightValue;}
      break;
    case REPLACE:
      jj_consume_token(REPLACE);
      jj_consume_token(RPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL1:
        replace1 = str();
        break;
      case PPATH:
      case CONCAT:
      case REPLACE:
      case QUERY:
      case SPLIT:
      case PATH:
        replace1 = expr(obj);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL1:
        replace2 = str();
        break;
      case PPATH:
      case CONCAT:
      case REPLACE:
      case QUERY:
      case SPLIT:
      case PATH:
        replace2 = expr(obj);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL1:
        replace3 = str();
        break;
      case PPATH:
      case CONCAT:
      case REPLACE:
      case QUERY:
      case SPLIT:
      case PATH:
        replace3 = expr(obj);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAR);
        {if (true) return replace1.replace(replace2,replace3);}
      break;
    case SPLIT:
      jj_consume_token(SPLIT);
      jj_consume_token(RPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL1:
        split1 = str();
        break;
      case PPATH:
      case CONCAT:
      case REPLACE:
      case QUERY:
      case SPLIT:
      case PATH:
        split1 = expr(obj);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL1:
        split2 = str();
        break;
      case PPATH:
      case CONCAT:
      case REPLACE:
      case QUERY:
      case SPLIT:
      case PATH:
        split2 = expr(obj);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      split3 = num();
      jj_consume_token(LPAR);
        {if (true) return split1.split(split2)[split3];}
      break;
    case QUERY:
      jj_consume_token(QUERY);
      jj_consume_token(RPAR);
      graph = resGraph(obj);
      jj_consume_token(COMMA);
      querysq = str();
      jj_consume_token(LPAR);
        objs = (List) obj;
        resIRI = (String)objs.get(1);
        prefixMap = (PrefixMapping)objs.get(2);
        //querysq = "{ ?res skos:prefLabel ?title . BIND (STR(?title)  AS ?template) FILTER (lang(?title) = 'en')}";
        querysq = querysq.replace("?res", "<" + resIRI + ">");
        querysq = "SELECT ?template WHERE " + querysq;
        Query gq = QueryFactory.create(Global.prefixes + querysq);
        gq.setPrefixMapping(prefixMap);
        gq.getPrologue().getPrefixMapping().clearNsPrefixMap();

        rs = Global.exeQuery(gq.serialize(), graph);
        while (rs.hasNext()){
            String varResult = rs.next().get("?template").toString();
            {if (true) return varResult;}
        }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Model resGraph(Object obj) throws ParseException {
    Token t;
    t = jj_consume_token(RESG);
        List <Object> objs = (List) obj;
        Model objModel = (Model)objs.get(0);
        {if (true) return objModel;}
    throw new Error("Missing return statement in function");
  }

  static final public String getResIRI(Object obj) throws ParseException {
    Token t;
    t = jj_consume_token(RES);
        List <Object> objs = (List) obj;
        String resIRI = (String)objs.get(1);
        {if (true) return resIRI;}
    throw new Error("Missing return statement in function");
  }

  static final public String str() throws ParseException {
        Token t;
    t = jj_consume_token(STRING_LITERAL1);
        String resStr = t.toString();
        resStr = resStr.substring(1,resStr.length()-1);
        {if (true) return resStr;}
    throw new Error("Missing return statement in function");
  }

  static final public int num() throws ParseException {
        Token t;
    t = jj_consume_token(NUMBER);
                   {if (true) return Integer.parseInt(t.toString());}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GenIRITokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x81000,0x80fc0,0x80fc0,0x80fc0,0x80fc0,0x80fc0,0x80fc0,0x80fc0,0xfc0,};
   }

  /** Constructor with InputStream. */
  public GenIRI(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GenIRI(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GenIRITokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GenIRI(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GenIRITokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GenIRI(GenIRITokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GenIRITokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
