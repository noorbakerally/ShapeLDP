options
{
}
PARSER_BEGIN(GenIRI)
package geniri.iri;
import java.net.URI;
public class GenIRI
{


}
PARSER_END(GenIRI)
SKIP :
{
    " "
|   "\r"
|   "\t"
|   "\n"
}
TOKEN:
{
    < NUMBER: (["0"-"9"])+  > |
    <PATH: "path"> |
    <RES: "res"> |
    <RPAR: "("> |
    <LPAR: ")"> |
    <QUOTE: "'"> |
    <COMMA: ","> |
    <ECHAR: "\\" ( "t"|"b"|"n"|"r"|"f"|"\\"|"\""|"'"|"{"|"}") > |
    <STRING_LITERAL1: "'" ( (~["'","\\","\n","\r","{"]) | <ECHAR> )* "'" >
}

String expr(Object obj):
{
	String leftValue ;
    int rightValue ;
}
{
    <PATH> <RPAR> ( leftValue = res(obj) | leftValue = str() ) <COMMA> rightValue = num() <LPAR>
	{
	    URI uri = URI.create(leftValue);
        String[] pathParts = uri.getRawPath().split("/");
        String result = pathParts[rightValue+1];
	    return result;

	}
}

String res(Object obj):
{
    Token t;
}
{
    t = <RES> {
        String resStr = (String)obj;
        return resStr;
    }
}

String str():
{
	Token t;
}
{

    t = <STRING_LITERAL1> { return t.toString(); }
}

int num():
{
	Token t;
}
{
    t = <NUMBER> { return Integer.parseInt(t.toString()); }
}

